import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'gradle.plugin.co.riiid:gradle-github-plugin:0.4.2'     
    }
}

//plugins loaded from special gradle plugin repo...
plugins {
    //google "gradle build scan" or https://github.com/gradle/gradle-build-scan-quickstart
    // essentially, ./gradlew build -Dscan
    id 'com.gradle.build-scan' version '1.0' //google "gradle build scan"
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.2.0"
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'


ext {
    // Project constants

    /*
     * Dependencies can be named so that sub-projects can reference consistent version of them.
     * dependencies {
     *     compile deps['joda-time']
     * }
     */
    deps = [
       'junit':           'junit:junit:4.11',  
       'groovy':          'org.codehaus.groovy:groovy-all:2.4.6',

       //We literally ONLY bring this in for one method call into PropertyUtils so we should clone that code
       //instead of bringing in an entire jar perhaps...?
       'commons-beans':   'commons-beanutils:commons-beanutils:1.9.2',

       'javax-inject':    'javax.inject:javax.inject:1',
       'slf4j-api':       'org.slf4j:slf4j-api:1.7.21',
       'slf4j-simple':    'org.slf4j:slf4j-simple:1.7.21',
       //do we need this one...
       //'logback-core':  'ch.qos.logback:logback-core:1.1.7', 
       'logback-classic': 'ch.qos.logback:logback-classic:1.1.7',
       'joda-time':       'joda-time:joda-time:2.9.4',
       'guice':           'com.google.inject:guice:4.0',
       'guice-multibindings': 'com.google.inject.extensions:guice-multibindings:4.0',
       'guava':           'com.google.guava:guava:19.0',
       'eclipse-compiler':'org.eclipse.jdt.core.compiler:ecj:4.5.1',
       'apache-commons-io': 'commons-io:commons-io:2.4',
       'metrics':         'io.dropwizard.metrics:metrics-core:3.1.0',
       'log4jdbc':        'com.googlecode.log4jdbc:log4jdbc:1.2',
    ]

}

repositories {
    mavenCentral()
}

jar.dependsOn("getProjectVersion")

//Section needed by the above com.gradle.build-scan plugin that was added
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

ext {
      //This is an input directory that we read jars from if they are not in a repo somewhere
      fixedLibDir = file('lib')
      toStagingDir = file(new File(buildDir, 'alljars'))
      github_org = 'cromulence'
      project_name = 'object-translator'
   }




publishing {
    repositories {
        maven {
            url "artifactregistry://europe-west2-maven.pkg.dev/cromulence/nexus"
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId  gavGroup
            artifactId gavArtifact
            from components.java
        }
    }
}



apply plugin: 'maven-publish'

dependencies {
  compileOnly 'org.slf4j:slf4j-simple'
}


//allprojects {
   apply plugin: 'java'
   //apply plugin: 'checkstyle'
   apply plugin: 'eclipse'
   apply plugin: 'idea'
   apply plugin: 'maven-publish'
   apply plugin: 'jacoco' //code coverage

   jacoco {
      toolVersion = '0.7.1.201405082137'
   }

//   ext {
//      //This is an input directory that we read jars from if they are not in a repo somewhere
//      fixedLibDir = file('lib')
//      toStagingDir = file(new File(buildDir, 'alljars'))
//      github_org = 'cromulence'
//      project_name = 'object-translator'
//   }
   //doing this modifies the mvn artifact id and we can't seem to reset it
   //archivesBaseName = "webpieces-${it.name}"

   //checkstyle {
   //    configFile = rootProject.file('config/checkstyle.xml')
   //    toolVersion = "5.9"
   //}

   repositories {
       mavenCentral()
   }
   dependencies {
       testImplementation deps['junit']
       //for logging in tests
       testImplementation deps['groovy']

       implementation deps['javax-inject']
       implementation deps['slf4j-api']
       compileOnly deps['slf4j-simple']
       //do we need this one..
       //compile deps['logback-core']
       implementation deps['logback-classic']
       implementation deps['joda-time']

       //This line includes any jars a developer drops into {project}/lib directory
       implementation fileTree(dir: 'lib', include: '*.jar')
   }

   //We could do this just for the template projects, BUT during debugging, it is sooo
   //damn nice to have the var names, it is worth the performance penalty I think though
   //we could change this
   [compileJava, compileTestJava]*.options.collect {options ->
     options.compilerArgs.add '-parameters'
   }

   if (JavaVersion.current().isJava8Compatible()) {
     tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
     }
   }

   jar {
      //TODO: Share the source and binary manifest code!!! so changes are done in one place
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": projectVersion(),
                   "SCM-Revision": revision
                   )
      }
   }

   task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from 'build/docs/javadoc'
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": version,
                   "SCM-Revision": revision
                   )
      }
   }

   task sourcesJar(type: Jar) {
      classifier = 'sources'
      from sourceSets.main.allSource
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": version,
                   "SCM-Revision": revision
                   )
      }
   }

   artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
   }

   if(project.hasProperty('projVersion')) {
       signing {
          sign configurations.archives
       }
   }

   assemble.dependsOn('getProjectVersion')

   test{
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
      afterTest { descr, result ->
        def totalTime = result.endTime - result.startTime
        logger.warn("Test complete ${descr.className} : ${descr.name} TOTAL TIME=${totalTime}")
      }
      testLogging {
        events "failed"
        exceptionFormat "full"
      }
   }

   //Using eclipse bin folder is WAY too common.  use outputeclipse instead so we can safely ignore it
   eclipse {
      classpath {
         defaultOutputDir = file('eclipse-output')
      }
   }


  build.dependsOn('getProjectVersion')


  task getProjectVersion {
    doLast {
// is there a travis tag?

      println "getProjectVersion in"
      println "travistag"
      println System.getenv("TRAVIS_TAG")
      println "travis"
      println System.getenv("TRAVIS")
      println "getProjectVersion carry on"
      println "BUILD_NUMBER"
      println System.getenv("BUILD_NUMBER")

      if (System.getenv("TRAVIS_TAG") != null && System.getenv("TRAVIS_TAG").length() > 0) {
        // we are building a tag on travis
        String tagName = System.getenv("TRAVIS_TAG")

        println "Travis tag build"

        if (tagName.startsWith("${majorMinorVersion}")) {
          //we're building a tag in line with the current expected version'
          project.version = tagName
          println "Version as expected ${project.version}"
        } else {
          // name is messed up
          project.version = "${majorMinorVersion}.${tagName}"
          println "Version not as expected: ${project.version}"
        }
      } else if (System.getenv("TRAVIS") != null && System.getenv("TRAVIS").length() > 0) {
        // travis master build
        project.version = "${majorMinorVersion}-SNAPSHOT"
        println "Building master ${project.version}"
      } else if (System.getenv("BUILD_NUMBER") != null && System.getenv("BUILD_NUMBER").length() > 0) {
        // jenkins master build
        println "Jenkins build"

        project.version = "${majorMinorVersion}.${System.getenv("BUILD_NUMBER")}"

        if (!"master".equals(System.getenv("BRANCH"))) {
            project.version = "${BRANCH}-${project.version}"
        }

        println "Building master ${project.version}"
      } else {
        //local build
        project.version = "${majorMinorVersion}-SNAPSHOT"
        println "Building local ${project.version}"
      }
    }
  }


  task printTasks {
    doLast {
      project.tasks.collect { task -> println("task=" + task + " dependsOn=" + task.dependsOn) }
    }
  }

//  task release()

  def projectVersion() {
    if(System.getenv("TRAVIS_TAG") != null && System.getenv("TRAVIS_TAG").length() > 0) {
      // we are building a tag on travis
      String tagName = System.getenv("TRAVIS_TAG")

      println "Travis tag build"

      if(tagName.startsWith("${majorMinorVersion}")) {
        //we're building a tag in line with the current expected version'
        project.version = tagName
        println "Version as expected ${project.version}"
      } else {
        // name is messed up
        project.version = "${majorMinorVersion}.${tagName}"
        println "Version not as expected: ${project.version}"
      }
    } else if(System.getenv("TRAVIS") != null && System.getenv("TRAVIS").length() > 0) {
      // travis master build
      project.version = "${majorMinorVersion}-SNAPSHOT"
      println "Building master ${project.version}"
    } else {
      //local build
      project.version = "${majorMinorVersion}-SNAPSHOT"
      println "Building local ${project.version}"
    }

    println "Returning ${project.version}"
    return project.version
  }

  def releaseDate() {
    new SimpleDateFormat("yyyy-MM-dd").format (new Date())
  }

  def tagName() {
    System.getenv("TRAVIS_TAG")
  }
//}
